services:
  postgres-inventory:
    image: postgres:15
    environment:
      POSTGRES_USER: bayer_user
      POSTGRES_PASSWORD: secure_password
      POSTGRES_DB: inventory_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_inventory_data:/var/lib/postgresql/data
  postgres-order:
    image: postgres:15
    environment:
      POSTGRES_USER: bayer_user
      POSTGRES_PASSWORD: secure_password
      POSTGRES_DB: order_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_order_data:/var/lib/postgresql/data
  postgres-user:
    image: postgres:15
    environment:
      POSTGRES_USER: bayer_user
      POSTGRES_PASSWORD: secure_password
      POSTGRES_DB: user_db
    ports:
      - "5434:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
  postgres-warehouse:
    image: postgres:15
    environment:
      POSTGRES_USER: bayer_user
      POSTGRES_PASSWORD: secure_password
      POSTGRES_DB: warehouse_db
    ports:
      - "5435:5432"
    volumes:
      - postgres_warehouse_data:/var/lib/postgresql/data
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
  zipkin:
    image: openzipkin/zipkin:2.24
    ports:
      - "9411:9411"
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    depends_on:
      - elasticsearch
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
  ConfigServer:
    build: ./ConfigServer
    image: supplychainmanagementsystem-configserver:latest
    ports:
      - "8888:8888"
  eureka-server:
    build: ./eureka-server
    image: supplychainmanagementsystem-eurekaserver:latest
    ports:
      - "8761:8761"
  APIGateway:
    build: ./APIGateway
    image: supplychainmanagementsystem-apigateway:latest
    ports:
      - "8080:8080"
    depends_on:
      - ConfigServer
      - eureka-server
  InventoryService:
    build: ./InventoryService
    image: supplychainmanagementsystem-inventoryservice:latest
    ports:
      - "8081:8081"
    depends_on:
      - postgres-inventory
      - kafka
      - ConfigServer
      - eureka-server
  OrderService:
    build: ./OrderService
    image: supplychainmanagementsystem-orderservice:latest
    ports:
      - "8082:8082"
    depends_on:
      - postgres-order
      - kafka
      - ConfigServer
      - eureka-server
  NotificationService:
    build: ./NotificationService
    image: supplychainmanagementsystem-notificationservice:latest
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - ConfigServer
      - eureka-server
  UserService:
    build: ./UserService
    image: supplychainmanagementsystem-userservice:latest
    ports:
      - "8084:8084"
    depends_on:
      - postgres-user
      - ConfigServer
      - eureka-server
  WarehouseService:
    build: ./WarehouseService
    image: supplychainmanagementsystem-warehouseservice:latest
    ports:
      - "8085:8085"
    depends_on:
      - postgres-warehouse
      - ConfigServer
      - eureka-server
volumes:
  postgres_inventory_data:
  postgres_order_data:
  postgres_user_data:
  postgres_warehouse_data:
  elasticsearch_data: